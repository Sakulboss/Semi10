import numpy as np

# let's start with a one-dimensional array (vector)
print('Vector')
a = np.array([1, 2, 3])
print(a)
print(a.ndim)
print(a.shape)
print(a.dtype)

# now we look at a two-dimensional array (matrix)
print('\nMatrix')
a = np.array([[1.1, 2.2], [3.3, 4.4]])
print(a)
print(a.ndim)
print(a.shape)
print(a.dtype)

# create arrays filled with ones/zeros
print('\nOnes/Zeros')
a = np.zeros([2, 3])
print(a)
a = np.ones(3)
print(a)
a = np.ones(3, dtype=int)
print(a)

# create array with increasing numbers
print('\nIncreasing')
a = np.arange(4)
print(a)

# decreasing?
b = a[::-1]
print(b)

# indexing/slicing works just with strings/list before
print('\nIndexing/Slicing')
a = np.arange(4)
print(a[0])
print(a[:2])
print(a[-1])

# concatenate two arrays to a new one
print('\nConcatenate')
a = np.arange(4)
b = np.arange(3)
print(np.concatenate((a, b)))

# horizontal and vertical stacking of (2D) arrays
a = np.array((1, 2), dtype=int)
b = np.array((3, 4), dtype=int)

print(a, b, sep="\n")
## TASK: implement horizontal concatenation of a and b (replace "None" in the line below)
hc = np.concatenate((a, b))
assert np.array_equal(hc, [1, 2, 3, 4])

## TASK: implement horizontal concatenation of a and b (replace "None" in the line below)
vc = np.vstack((a, b))
assert np.array_equal(vc, [[1, 2], [3, 4]])

# horizontal and vertical stacking of (2D) arrays
a = np.array((1, 2), dtype=int)
b = np.array((3, 4), dtype=int)

## TASK: implement horizontal concatenation of a and b (replace "None" in the line below)
hc = np.hstack((a, b))
assert np.array_equal(hc, [1, 2, 3, 4])

## TASK: implement horizontal concatenation of a and b (replace "None" in the line below)
vc = np.vstack((a, b))
assert np.array_equal(vc, [[1, 2], [3, 4]])

# 3) uniform distribution between [v_min, v_max]
v_min = 10
v_max = 20

# !TASK!: generate a 1D numpy array with 5 random numbers from a uniform distribution between v_min and v_max
random_numbers_vmin_vmax = np.random.uniform(v_min, v_max, 5)
assert len(random_numbers_vmin_vmax) == 5
assert np.all(np.logical_and(random_numbers_vmin_vmax >= v_min,
                             random_numbers_vmin_vmax <= v_max))
print(random_numbers_vmin_vmax)

# random 5 x 5 image with normally distributed pixel values

# option 1
random_image = np.random.normal(0, 1, (3,3))
print(random_image, '\n')

# option 2
random_image = np.random.randn(3,3)
print(random_image, '\n')

images = []
for i in range(10):
    images.append(np.random.rand(3,3))
print(f"At this point, we have a list of {len(images)} images of shape {images[0].shape}", '\n')

images = np.array(images)
print(images.shape, '\n')

# Here's our first image
print(images[0, :, :], '\n')

# !TASK!: add a "singleton" dimension to our 3D tensor "images" (replace "None" in the line below)
images_4d = np.expand_dims(images, axis=-1)
assert np.array_equal(images_4d.shape, (10, 3, 3, 1))